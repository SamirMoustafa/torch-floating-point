name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Build and test with Docker
      run: |
        # Use the main Dockerfile for testing
        docker build -t torch-floating-point .
        # Clean up
        docker rmi torch-floating-point

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff

    - name: Run Ruff linter
      run: |
        ruff check .

    - name: Run Ruff formatter
      run: |
        ruff format --check .

  build:
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch setuptools wheel twine
    - name: Build package
      run: python setup.py sdist bdist_wheel
    - name: Check if version exists on PyPI
      id: check_version
      run: |
        PACKAGE_NAME="torch-floating-point"
        CURRENT_VERSION=$(python version.py)
        VERSION_EXISTS=$(pip index versions $PACKAGE_NAME | grep $CURRENT_VERSION || true)
        if [ -z "$VERSION_EXISTS" ]; then
          echo "Version does not exist on PyPI, proceeding with upload."
          echo "exists=false" >> $GITHUB_OUTPUT
        else
          echo "Version already exists on PyPI, skipping upload."
          echo "exists=true" >> $GITHUB_OUTPUT
        fi
    - name: Upload to PyPI
      if: steps.check_version.outputs.exists == 'false'
      run: python -m twine upload --verbose dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

