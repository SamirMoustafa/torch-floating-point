name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:latest

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build and test with Docker
      run: |
        # Build with BuildKit and caching
        docker buildx build \
          --platform linux/amd64 \
          --cache-from type=local,src=/tmp/.buildx-cache \
          --cache-to type=local,dest=/tmp/.buildx-cache,mode=max \
          --tag torch-floating-point:latest \
          --file Dockerfile \
          .
        
        # Clean up any temporary files to free disk space
        docker system prune -f

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff

    - name: Run Ruff linter
      run: |
        ruff check .

    - name: Run Ruff formatter
      run: |
        ruff format --check .

  build:
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-build-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-build-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch setuptools wheel twine

    - name: Build package
      run: python setup.py sdist bdist_wheel

    - name: Check if version exists on PyPI
      id: check_version
      run: |
        PACKAGE_NAME="torch-floating-point"
        CURRENT_VERSION=$(python version.py)
        VERSION_EXISTS=$(pip index versions $PACKAGE_NAME | grep $CURRENT_VERSION || true)
        if [ -z "$VERSION_EXISTS" ]; then
          echo "Version does not exist on PyPI, proceeding with upload."
          echo "exists=false" >> $GITHUB_OUTPUT
        else
          echo "Version already exists on PyPI, skipping upload."
          echo "exists=true" >> $GITHUB_OUTPUT
        fi

    - name: Upload to PyPI
      if: steps.check_version.outputs.exists == 'false'
      run: python -m twine upload --verbose dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
